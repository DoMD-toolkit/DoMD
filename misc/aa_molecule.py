from typing import Union

import networkx as nx
from rdkit import Chem

from misc.draw import print_mol_ascii
from misc.logger import logger


class Atomarium(object):
    __doc__ = """In case the rdkit.Chem.Mol changes the user-defined atomic properties.
    This is a hand-made add-H and res_id program, alternative of set_molecule_id_for_h and AllChem.AddHs
    It's experimental, please use this function very carefully.
    """

    def __init__(self, molecule: Union[Chem.Mol, Chem.RWMol], mol_meta: nx.Graph, cg_mol: nx.Graph):
        self.molecule = molecule
        self.molecule_graph = nx.Graph()
        for atom in molecule.GetAtoms():
            self.molecule_graph.add_node(atom.GetIdx(), symbol=atom.GetSymbol())
        for bond in molecule.GetBonds():
            self.molecule_graph.add_edge(bond.GetBeginAtomIdx(), bond.GetEndAtomIdx(), bond_type=bond.GetBondType())
        self.force_field = None
        self.mol_meta = mol_meta
        self.cg_mol = cg_mol
        self.set_res_id()
        self.addhs()

    def __getattr__(self, item):
        return getattr(self.molecule, item)

    def set_res_id(self):
        for m in self.mol_meta.nodes:
            molecule = self.mol_meta.nodes[m]
            for idx in molecule['atom_idx'].values():
                atom = self.molecule.GetAtomWithIdx(idx)
                atom.SetIntProp('global_res_id', int(m))
                self.molecule_graph.nodes[idx]['global_res_id'] = int(m)
                logger.debug(f"global_res_id for atom {idx} in residue {m} is {m}")
                if self.cg_mol.nodes[m].get('local_res_id') is None:
                    logger.warning(f"No local_res_id found in cg_molecule!")
                    atom.SetIntProp('res_id', -1)
                    self.molecule_graph.nodes[idx]['res_id'] = -1
                else:
                    logger.debug(f"local_res_id for res {m}: {self.cg_mol.nodes[m]['local_res_id']}")
                    atom.SetIntProp('res_id', self.cg_mol.nodes[m]['local_res_id'])
                    self.molecule_graph.nodes[idx]['res_id'] = self.cg_mol.nodes[m]['local_res_id']

    def get_global_res_id(self, idx: int):
        return self.molecule_graph.nodes[idx]['global_res_id']

    def get_res_id(self, idx: int):
        return self.molecule_graph.nodes[idx]['res_id']

    def addhs(self):
        # The original molecule is not changed with AddHs function.
        # The AddHs function should be carefully used.
        # Here is an implementation where Hs are manually added, so that the graph is allowed to switch back
        # to rdkit molecules for force field, etc. Hope this part stays here.
        atom: Chem.Atom
        counter = max(list(self.molecule_graph.nodes())) + 1
        for atom in self.molecule.GetAtoms():
            idx = atom.GetIdx()
            atom_graph = self.molecule_graph.nodes[idx]
            assert atom_graph['symbol'] == atom.GetSymbol()
            if atom.GetSymbol() == 'H': continue
            eH = atom.GetNumExplicitHs()
            iH = atom.GetNumImplicitHs()
            # if the molecule contains H already, for an H-free molecule, iH + eH is the total number of Hs to be added
            eH_graph = sum([_ for _ in list(self.molecule_graph[idx]) if self.molecule_graph.nodes[_]['symbol'] == 'H'])
            num_h_to_add = iH + eH - eH_graph
            logger.debug(f"Atom {atom.GetSymbol()}-{idx} has {num_h_to_add} H-atoms")
            logger.debug(f"\n{print_mol_ascii(self.molecule, idx)}\n")
            for i in range(num_h_to_add):
                self.molecule_graph.add_node(counter, symbol='H', res_id=atom_graph['res_id'],
                                             global_res_id=atom_graph['global_res_id'])
                self.molecule_graph.add_edge(idx, counter, bond_type=Chem.BondType.SINGLE)
                counter += 1
        self.molecule = Chem.RWMol()
        mapping = {}
        for atom_idx_graph in self.molecule_graph.nodes():
            atom_graph = self.molecule_graph.nodes[atom_idx_graph]
            atom = Chem.Atom(atom_graph['symbol'])
            idx = self.molecule.AddAtom(atom)
            atom.SetIntProp('global_res_id', atom_graph['global_res_id'])
            atom.SetIntProp('res_id', atom_graph['res_id'])
            mapping[atom_idx_graph] = idx
        nx.relabel_nodes(self.molecule_graph, mapping)
        for edge in self.molecule_graph.edges():
            self.molecule.AddBond(edge[0], edge[1], order=self.molecule_graph.edges[edge]['bond_type'])
        Chem.SanitizeMol(self.molecule)


if __name__ == '__main__':
    from rdkit.Chem import AllChem
    import logging

    logger.setLevel(logging.DEBUG)
    # Test case: (res1)ph-C-C-ph-Cl(res2)
    # hand-made add-H with res-id and global_res_id
    mol = Chem.MolFromSmiles('c1ccccc1CCc2cc(Cl)ccc2')
    mol_meta = nx.Graph()
    # mol_meta was generated by Reactor
    mol_meta.add_node(1, atom_idx={i: i for i in range(7)})
    mol_meta.add_node(2, atom_idx={i: i + 7 for i in range(8)})
    mol_meta.add_edge(1, 2)
    cg_mol = nx.Graph()
    cg_mol.add_node(1, local_res_id=1)
    cg_mol.add_node(2, local_res_id=2)
    cg_mol.add_edge(1, 2)
    m = Molecule(mol, mol_meta, cg_mol)
    mol_h = AllChem.AddHs(mol)
    print(Chem.MolToSmiles(mol_h))
    print(Chem.MolToSmiles(m.molecule))
    print(m.molecule_graph.nodes(data=True))
